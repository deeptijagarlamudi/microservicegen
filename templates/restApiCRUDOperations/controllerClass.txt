package ${rootPackage}.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import ${rootPackage}.${entityName};
import ${rootPackage}.${entityName}Repository;

@Controller
public class ${entityName}Controller {

	@Autowired
	private ${entityName}Repository ${entityNameinSmallCase}Repository;

	@GetMapping(value = "/${entityNameinSmallCase}s", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<${entityName}>> retrieveAll${entityName}s() {
		return ResponseEntity.ok(${entityNameinSmallCase}Repository.findAll());
	}

	@GetMapping("/${entityNameinSmallCase}s/{id}")
	public ResponseEntity<${entityName}> retrieve${entityName}(@PathVariable long id) {
		Optional<${entityName}> ${entityNameinSmallCase} = ${entityNameinSmallCase}Repository.findById(id);
		return ResponseEntity.ok(${entityNameinSmallCase}.get());
	}

	@DeleteMapping("/${entityNameinSmallCase}s/{id}")
	public void delete${entityName}(@PathVariable long id) {
		${entityNameinSmallCase}Repository.deleteById(id);
	}

	@PostMapping("/${entityNameinSmallCase}s")
	public ResponseEntity<${entityName}> create${entityName}(@RequestBody ${entityName} ${entityNameinSmallCase}) {
		${entityName} saved${entityName} = ${entityNameinSmallCase}Repository.save(${entityNameinSmallCase});
		return ResponseEntity.ok(saved${entityName});

	}

	@PutMapping("/${entityNameinSmallCase}s/{id}")
	public ResponseEntity<${entityName}> update${entityName}(@RequestBody ${entityName}  ${entityNameinSmallCase}, @PathVariable long id) {

		Optional<${entityName}> ${entityNameinSmallCase}Optional = ${entityNameinSmallCase}Repository.findById(id);

		if (!${entityNameinSmallCase}Optional.isPresent())
			return ResponseEntity.notFound().build();

		${entityNameinSmallCase}.set${entityName}Id(id);
		${entityName} save${entityName} = ${entityNameinSmallCase}Repository.save(${entityNameinSmallCase});
		return ResponseEntity.ok(saved${entityName});
	}
}
